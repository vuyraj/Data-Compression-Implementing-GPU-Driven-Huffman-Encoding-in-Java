plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

repositories {
    mavenCentral()
}

javafx {
    version = '21.0.1'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics']
}

dependencies {
    // JavaFX
    implementation libs.bundles.javafx
    
    // Logging
    implementation libs.bundles.logging
    
    // Configuration
    implementation libs.typesafe.config
    
    // Utilities
    implementation libs.guava
    implementation libs.commons.codec
    implementation libs.commons.io
    
    // TornadoVM from SDK installation
    implementation fileTree(dir: '/opt/TornadoVM/bin/sdk/share/java/tornado', include: ['*.jar'])
    
    // Testing
    testImplementation libs.bundles.testing
    testImplementation libs.bundles.property.testing
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    mainClass = 'com.datacomp.ui.DataCompApp'
    applicationDefaultJvmArgs = [
        '-Xms512m',
        '-Xmx4g',
        '-Dtornado.load.runtime.implementation=uk.ac.manchester.tornado.runtime.TornadoCoreRuntime',
        '--add-modules=jdk.incubator.vector'
    ]
}

tasks.named('test') {
    useJUnitPlatform()
    
    maxHeapSize = '2g'
    
    systemProperty 'tornado.unittests.device', System.getProperty('tornado.unittests.device', 'ignore')
    
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }
}

tasks.register('testGpu', Test) {
    useJUnitPlatform {
        includeTags 'gpu'
    }
    systemProperty 'tornado.unittests.device', 'opencl:0:0'
}

tasks.register('generateLargeTestFile', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.datacomp.util.TestDataGenerator'
    args = ['1024'] // 1GB default
}

run {
    standardInput = System.in
}

tasks.register('runTornado', Exec) {
    dependsOn 'assemble'
    
    def mainClass = 'com.datacomp.ui.DataCompApp'
    
    // Build classpath excluding JavaFX
    def nonJavaFxClasspath = sourceSets.main.runtimeClasspath.filter { 
        !it.name.contains('javafx')
    }.collect { it.absolutePath }.join(':')
    def classPath = "build/classes/java/main:build/resources/main:${nonJavaFxClasspath}"
    
    // JavaFX module path
    def javaFxJars = sourceSets.main.runtimeClasspath.filter { 
        it.name.contains('javafx')
    }.collect { it.absolutePath }.join(':')
    
    commandLine 'tornado',
            '--jvm', '--add-modules jdk.incubator.vector --add-modules javafx.controls,javafx.fxml,javafx.graphics',
            '--module-path', javaFxJars,
            '--classpath', classPath,
            mainClass
    
    standardOutput = System.out
    errorOutput = System.err
}

compileJava {
    options.compilerArgs += [
        '--add-modules', 'jdk.incubator.vector',
        '-Xlint:unchecked'
    ]
}
